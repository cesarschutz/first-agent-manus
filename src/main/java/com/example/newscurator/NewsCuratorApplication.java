package com.example.newscurator;

import com.example.newscurator.agent.NewsCuratorAgent;
import com.example.newscurator.models.NewsReport;
import com.example.newscurator.tools.ReportGeneratorTool;
import com.example.newscurator.utils.ConfigManager;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.Arrays;
import java.util.List;
import java.util.Scanner;

/**
 * Aplica√ß√£o principal do Curador de Not√≠cias Inteligente
 * 
 * Esta classe fornece uma interface de linha de comando para interagir com o agente
 */
public class NewsCuratorApplication {
    
    private static final Logger logger = LoggerFactory.getLogger(NewsCuratorApplication.class);
    private static final Scanner scanner = new Scanner(System.in);
    
    public static void main(String[] args) {
        logger.info("Iniciando Curador de Not√≠cias Inteligente");
        
        try {
            // Inicializa o agente
            NewsCuratorAgent agent = new NewsCuratorAgent();
            ReportGeneratorTool reportTool = new ReportGeneratorTool(new ConfigManager());
            
            // Exibe banner de boas-vindas
            printWelcomeBanner();
            
            // Loop principal da aplica√ß√£o
            boolean running = true;
            while (running) {
                try {
                    printMainMenu();
                    int choice = getMenuChoice();
                    
                    switch (choice) {
                        case 1:
                            handleSingleTopicSearch(agent, reportTool);
                            break;
                        case 2:
                            handleMultipleTopicsSearch(agent, reportTool);
                            break;
                        case 3:
                            handleCustomSearch(agent, reportTool);
                            break;
                        case 4:
                            handleDemoSearch(agent, reportTool);
                            break;
                        case 5:
                            showAgentStats(agent);
                            break;
                        case 6:
                            showHelp();
                            break;
                        case 0:
                            running = false;
                            break;
                        default:
                            System.out.println("‚ùå Op√ß√£o inv√°lida! Tente novamente.");
                    }
                    
                    if (running) {
                        System.out.println("\nPressione Enter para continuar...");
                        scanner.nextLine();
                    }
                    
                } catch (Exception e) {
                    logger.error("Erro durante execu√ß√£o", e);
                    System.out.println("‚ùå Erro: " + e.getMessage());
                }
            }
            
            System.out.println("üëã Obrigado por usar o Curador de Not√≠cias Inteligente!");
            
        } catch (Exception e) {
            logger.error("Erro fatal na aplica√ß√£o", e);
            System.err.println("‚ùå Erro fatal: " + e.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Exibe banner de boas-vindas
     */
    private static void printWelcomeBanner() {
        System.out.println("‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó");
        System.out.println("‚ïë              ü§ñ CURADOR DE NOT√çCIAS INTELIGENTE          ‚ïë");
        System.out.println("‚ïë                     Powered by Google ADK               ‚ïë");
        System.out.println("‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù");
        System.out.println();
        System.out.println("Bem-vindo ao seu assistente pessoal de curadoria de not√≠cias!");
        System.out.println("Este agente busca, filtra e resume not√≠cias sobre seus t√≥picos de interesse.");
        System.out.println();
    }
    
    /**
     * Exibe menu principal
     */
    private static void printMainMenu() {
        System.out.println("\n" + "=".repeat(50));
        System.out.println("üì∞ MENU PRINCIPAL");
        System.out.println("=".repeat(50));
        System.out.println("1. üîç Buscar not√≠cias sobre um t√≥pico");
        System.out.println("2. üìä Buscar not√≠cias sobre m√∫ltiplos t√≥picos");
        System.out.println("3. ‚öôÔ∏è  Busca personalizada (com filtros)");
        System.out.println("4. üéØ Demonstra√ß√£o (t√≥picos pr√©-definidos)");
        System.out.println("5. üìà Estat√≠sticas do agente");
        System.out.println("6. ‚ùì Ajuda");
        System.out.println("0. üö™ Sair");
        System.out.println("=".repeat(50));
        System.out.print("Escolha uma op√ß√£o: ");
    }
    
    /**
     * Obt√©m escolha do menu do usu√°rio
     */
    private static int getMenuChoice() {
        try {
            String input = scanner.nextLine().trim();
            return Integer.parseInt(input);
        } catch (NumberFormatException e) {
            return -1;
        }
    }
    
    /**
     * Manipula busca por um √∫nico t√≥pico
     */
    private static void handleSingleTopicSearch(NewsCuratorAgent agent, ReportGeneratorTool reportTool) {
        System.out.println("\nüîç BUSCA POR T√ìPICO √öNICO");
        System.out.println("-".repeat(30));
        System.out.print("Digite o t√≥pico que deseja pesquisar: ");
        
        String topic = scanner.nextLine().trim();
        if (topic.isEmpty()) {
            System.out.println("‚ùå T√≥pico n√£o pode estar vazio!");
            return;
        }
        
        System.out.println("\nüîÑ Buscando not√≠cias sobre: " + topic);
        System.out.println("‚è≥ Aguarde, isso pode levar alguns segundos...");
        
        NewsReport report = agent.curateNews(topic);
        displayReport(report, reportTool);
    }
    
    /**
     * Manipula busca por m√∫ltiplos t√≥picos
     */
    private static void handleMultipleTopicsSearch(NewsCuratorAgent agent, ReportGeneratorTool reportTool) {
        System.out.println("\nüìä BUSCA POR M√öLTIPLOS T√ìPICOS");
        System.out.println("-".repeat(35));
        System.out.println("Digite os t√≥picos separados por v√≠rgula:");
        System.out.print("Exemplo: tecnologia, intelig√™ncia artificial, startups\n> ");
        
        String input = scanner.nextLine().trim();
        if (input.isEmpty()) {
            System.out.println("‚ùå Pelo menos um t√≥pico deve ser informado!");
            return;
        }
        
        List<String> topics = Arrays.asList(input.split(","))
            .stream()
            .map(String::trim)
            .filter(s -> !s.isEmpty())
            .toList();
        
        if (topics.isEmpty()) {
            System.out.println("‚ùå Nenhum t√≥pico v√°lido foi informado!");
            return;
        }
        
        System.out.println("\nüîÑ Buscando not√≠cias sobre: " + String.join(", ", topics));
        System.out.println("‚è≥ Aguarde, isso pode levar alguns segundos...");
        
        NewsReport report = agent.curateNews(topics);
        displayReport(report, reportTool);
    }
    
    /**
     * Manipula busca personalizada com filtros
     */
    private static void handleCustomSearch(NewsCuratorAgent agent, ReportGeneratorTool reportTool) {
        System.out.println("\n‚öôÔ∏è BUSCA PERSONALIZADA");
        System.out.println("-".repeat(25));
        
        // T√≥picos
        System.out.print("Digite os t√≥picos (separados por v√≠rgula): ");
        String topicsInput = scanner.nextLine().trim();
        if (topicsInput.isEmpty()) {
            System.out.println("‚ùå Pelo menos um t√≥pico deve ser informado!");
            return;
        }
        
        List<String> topics = Arrays.asList(topicsInput.split(","))
            .stream()
            .map(String::trim)
            .filter(s -> !s.isEmpty())
            .toList();
        
        // N√∫mero m√°ximo de artigos
        System.out.print("N√∫mero m√°ximo de artigos (padr√£o: 10): ");
        String maxArticlesInput = scanner.nextLine().trim();
        int maxArticles = 10;
        if (!maxArticlesInput.isEmpty()) {
            try {
                maxArticles = Integer.parseInt(maxArticlesInput);
                if (maxArticles <= 0) maxArticles = 10;
            } catch (NumberFormatException e) {
                System.out.println("‚ö†Ô∏è Valor inv√°lido, usando padr√£o: 10");
            }
        }
        
        // Score m√≠nimo de relev√¢ncia
        System.out.print("Score m√≠nimo de relev√¢ncia (0.0 a 1.0, padr√£o: 0.0): ");
        String minScoreInput = scanner.nextLine().trim();
        double minScore = 0.0;
        if (!minScoreInput.isEmpty()) {
            try {
                minScore = Double.parseDouble(minScoreInput);
                if (minScore < 0.0 || minScore > 1.0) minScore = 0.0;
            } catch (NumberFormatException e) {
                System.out.println("‚ö†Ô∏è Valor inv√°lido, usando padr√£o: 0.0");
            }
        }
        
        System.out.println("\nüîÑ Executando busca personalizada...");
        System.out.println("‚è≥ Aguarde, isso pode levar alguns segundos...");
        
        NewsReport report = agent.curateNews(topics, maxArticles, minScore);
        displayReport(report, reportTool);
    }
    
    /**
     * Executa demonstra√ß√£o com t√≥picos pr√©-definidos
     */
    private static void handleDemoSearch(NewsCuratorAgent agent, ReportGeneratorTool reportTool) {
        System.out.println("\nüéØ DEMONSTRA√á√ÉO");
        System.out.println("-".repeat(20));
        System.out.println("Executando busca de demonstra√ß√£o com t√≥picos pr√©-definidos:");
        System.out.println("‚Ä¢ Intelig√™ncia Artificial");
        System.out.println("‚Ä¢ Tecnologia");
        System.out.println("‚Ä¢ Inova√ß√£o");
        
        List<String> demoTopics = Arrays.asList("intelig√™ncia artificial", "tecnologia", "inova√ß√£o");
        
        System.out.println("\nüîÑ Executando demonstra√ß√£o...");
        System.out.println("‚è≥ Aguarde, isso pode levar alguns segundos...");
        
        NewsReport report = agent.curateNews(demoTopics);
        displayReport(report, reportTool);
    }
    
    /**
     * Exibe estat√≠sticas do agente
     */
    private static void showAgentStats(NewsCuratorAgent agent) {
        System.out.println("\nüìà ESTAT√çSTICAS DO AGENTE");
        System.out.println("-".repeat(30));
        System.out.println(agent.getAgentStats());
    }
    
    /**
     * Exibe ajuda
     */
    private static void showHelp() {
        System.out.println("\n‚ùì AJUDA");
        System.out.println("-".repeat(10));
        System.out.println("O Curador de Not√≠cias Inteligente √© um agente que:");
        System.out.println();
        System.out.println("üîç BUSCA not√≠cias sobre t√≥picos de seu interesse");
        System.out.println("üè∑Ô∏è CATEGORIZA automaticamente as not√≠cias encontradas");
        System.out.println("üìù GERA RESUMOS inteligentes de cada artigo");
        System.out.println("üìä CRIA RELAT√ìRIOS estruturados com estat√≠sticas");
        System.out.println("‚≠ê AVALIA a relev√¢ncia de cada not√≠cia");
        System.out.println();
        System.out.println("üí° DICAS:");
        System.out.println("‚Ä¢ Use termos espec√≠ficos para melhores resultados");
        System.out.println("‚Ä¢ Combine m√∫ltiplos t√≥picos para an√°lises abrangentes");
        System.out.println("‚Ä¢ Ajuste filtros na busca personalizada conforme necess√°rio");
        System.out.println("‚Ä¢ Experimente a demonstra√ß√£o para ver o agente em a√ß√£o");
    }
    
    /**
     * Exibe relat√≥rio gerado
     */
    private static void displayReport(NewsReport report, ReportGeneratorTool reportTool) {
        System.out.println("\n‚úÖ Busca conclu√≠da com sucesso!");
        System.out.println();
        
        // Resumo r√°pido
        System.out.println(reportTool.generateQuickSummary(report));
        System.out.println();
        
        // Pergunta sobre formato de exibi√ß√£o
        System.out.println("Como deseja visualizar o relat√≥rio?");
        System.out.println("1. üìÑ Relat√≥rio completo (texto)");
        System.out.println("2. üìã Resumo executivo");
        System.out.println("3. üíæ Salvar como JSON");
        System.out.print("Escolha (1-3): ");
        
        String choice = scanner.nextLine().trim();
        System.out.println();
        
        switch (choice) {
            case "1":
                System.out.println(reportTool.generateTextReport(report));
                break;
            case "2":
                System.out.println("üìã RESUMO EXECUTIVO");
                System.out.println("-".repeat(20));
                System.out.println(report.getSummary());
                break;
            case "3":
                String json = reportTool.generateJsonReport(report);
                System.out.println("üíæ RELAT√ìRIO EM JSON:");
                System.out.println("-".repeat(25));
                System.out.println(json);
                break;
            default:
                System.out.println("üìã RESUMO EXECUTIVO (padr√£o)");
                System.out.println("-".repeat(30));
                System.out.println(report.getSummary());
        }
    }
}

